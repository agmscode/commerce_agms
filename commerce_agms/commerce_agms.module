<?php

/**
 * @file
 * Implements Agms Payment Gateway for use in Drupal Commerce.
 *
 */
// Agms Payment Gateway transaction mode definitions:
define('AGMS_TXN_MODE_LIVE', 'live');
define('AGMS_TXN_MODE_LIVE_TEST', 'live');

/**
 * Implements hook_menu().
*/
function commerce_agms_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/agms-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_agms_capture_form', 3, 5),
    'access callback' => 'commerce_agms_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_agms.admin.inc',
  );

  // Add a menu item for voiding transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/agms-void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_agms_void_form', 3, 5),
    'access callback' => 'commerce_agms_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_agms.admin.inc',
  );

  // Add a menu item for issuing credits.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/agms-credit'] = array(
    'title' => 'Credit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_agms_credit_form', 3, 5),
    'access callback' => 'commerce_agms_credit_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_agms.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for Agms Payment Gateway
 *   Agms Payment Gateway credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_agms_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Agms Payment Gateway AIM or isn't
  var_dump($transaction);
  // awaiting capture.
  if ($transaction->payment_method != 'agms' || empty($transaction->remote_id) ||
    strtoupper($transaction->remote_status) != 'AUTH_ONLY') {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines access to the void form for Agms Payment Gateway credit card transactions
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be voided.
 *
 * @return
 *   TRUE or FALSE indicating void access.
 */
function commerce_agms_void_access($order, $transaction) {
  if ($transaction->payment_method != 'agms' || empty($transaction->remote_id) ||
    !in_array(strtoupper($transaction->remote_status), array('AUTH_ONLY', 'PRIOR_AUTH_CAPTURE', 'AUTH_CAPTURE'))) {
    return FALSE;
  }

  // Return FALSE if it is more than 24 hours since the last update to the
  // transaction, as it will already have been settled.
  if (time() - $transaction->changed > 2600 * 24) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines access to the credit form for successful Agms Payment Gateway AIM credit
 * card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be credited.
 *
 * @return
 *   TRUE or FALSE indicating credit access.
 */
function commerce_agms_credit_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Agms Payment Gateway AIM, doesn't have a
  // success status or has an amount of 0 or less.
  if ($transaction->payment_method != 'agms' || $transaction->status != 'Approved' || $transaction->amount <= 0) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (time() - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_agms_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['agms'] = array(
    'base' => 'commerce_agms',
    'title' => t('Agms Payment Gateway - Credit Card'),
    'short_title' => t('AGMS CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates Agms Payment Gateway Transaction Method for card not present CC transactions.'),
    'cardonfile' => array(
      'charge callback' => 'commerce_agms_safe_cardonfile_charge',
      'update callback' => 'commerce_agms_safe_cardonfile_update',
      'delete callback' => 'commerce_agms_safe_cardonfile_delete',
    ),
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Agms Gateway Payment payment method.
 */
function commerce_agms_default_settings() {
  return array(
    'commerce_agms_username' => '',
    'commerce_agms_password' => '',
    'txn_mode' => AGMS_TXN_MODE_LIVE,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'cardonfile' => FALSE,
    'card_types' => array(),
    'log' => array('request' => '0', 'response' => '0'),
  );
}

/**
 * Callback for payment gateway settings.
 */
function commerce_agms_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_agms_default_settings();

  $form = array();

  $form['commerce_agms_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Agms Gateway Username'),
    '#default_value' => $settings['commerce_agms_username'],
  );
  $form['commerce_agms_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Agms Gateway Password'),
    '#default_value' => $settings['commerce_agms_password'],
  );
  
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Agms Gateway Supports Developer Mode though Test Card.'),
    '#options' => array(
      AGMS_TXN_MODE_LIVE => t('Live transactions in a live account'),
      
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  
  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  // SAFE support in conjunction with Transaction requires the Card on File module.
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality with this payment method using Agms Paymet Gateway SAFE module.'),
      '#description' => t('This requires download of additional Agms Payment Gateway SAFE module.'),
      '#default_value' => $settings['cardonfile'],
    );

  }
  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File funcitionality download and install the Card on File module.'),
    );
  }
  
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );
  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_agms_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );

  // Add the credit card types array if necessary.
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

    if (!empty($card_types)) {
      $fields['type'] = $card_types;
    }
  }

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_agms_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // If the customer specified a card on file, skip the normal validation.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return;
  }

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_agms_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // If the customer specified payment using a card on file, attempt that now
  // and simply return the result.
  if (module_exists('commerce_cardonfile') && $payment_method['settings']['cardonfile'] &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return commerce_agms_safe_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge);
  }

  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }

  // If the charge amount is 0...
  if ($charge['amount'] == 0) {
    // Prevent the transaction except under limited circumstances.
    $prevent_transaction = TRUE;

    // Allow 0 amount authorizations on Visa cards.
    if ($payment_method['settings']['txn_type'] == COMMERCE_CREDIT_AUTH_ONLY && $card_type == 'visa') {
      $prevent_transaction = FALSE;
    }

    // If the transaction should still be prevented...
    if ($prevent_transaction) {
      // Create a transaction to log the skipped transaction and display a
      // helpful message to the customer.
      $transaction = commerce_payment_transaction_new('agms', $order->order_id);
      $transaction->amount = $charge['amount'];
      $transaction->currency_code = $charge['currency_code'];
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Invalid @amount transaction not attempted.', array('@amount' => commerce_currency_format($charge['amount'], $charge['currency_code'])));
      commerce_payment_transaction_save($transaction);

      drupal_set_message('We encountered an error processing your transaction. Please contact us to resolve the issue.', 'error');
      return FALSE;
    }
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the default transaction type from the payment method settings.
  $txn_type = $payment_method['settings']['txn_type'];

  // If txn_type has been specified in the pane values array, such as through
  // the special select element we alter onto the payment terminal form, use
  // that instead.
  if (!empty($pane_values['txn_type'])) {
    $txn_type = $pane_values['txn_type'];
  }

  // Build a name-value pair array for this transaction.
  $nvp = array(
    'TransactionType' => commerce_agms_txn_type($txn_type),
    'PaymentType' => 'creditcard',
    'Amount' => number_format(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']), 2, '.', ''),
    'CCNumber' => $pane_values['credit_card']['number'],
    'CCExpDate' => $pane_values['credit_card']['exp_month'] . substr($pane_values['credit_card']['exp_year'],-2),
  );

  if (isset($pane_values['credit_card']['code'])) {
    $nvp['CVV'] = $pane_values['credit_card']['code'];
  }

  // Build a description for the order.
  $description = array();
  // Descriptions come from products, though not all environments have them. So check first.
  if (function_exists('commerce_product_line_item_types')) {
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
        $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
      }
    }
  }

  // Add additional transaction invormation to the request array.
  $nvp += array(
    // Order Information
    'OrderID' => $order->order_number,
    'OrderDescription' => substr(implode(', ', $description), 0, 255),

    // Customer Information
    'Email' => substr($order->mail, 0, 255),
    'PONumber' => substr($order->uid, 0, 20),
    'IPAddress' => substr(ip_address(), 0, 15),
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()){
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }

    $nvp += array(
      // Customer Billing Address
      'FirstName' => substr($billing_address['first_name'], 0, 50),
      'LastName' => substr($billing_address['last_name'], 0, 50),
      'Company' => substr($billing_address['organisation_name'], 0, 50),
      'Address' => substr($billing_address['thoroughfare'], 0, 60),
      'City' => substr($billing_address['locality'], 0, 40),
      'State' => substr($billing_address['administrative_area'], 0, 40),
      'Zip' => substr($billing_address['postal_code'], 0, 20),
      'Country' => $billing_address['country'],
    );
  }
  else {
    $billing_address = array();
  }

  // Submit the request to Agms Payment Gateway.
  // TODO
  $response = commerce_agms_request($payment_method, $nvp);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('agms', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response['TRANS_ID'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($response['STATUS_CODE'] != '1') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($txn_type) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;

      case COMMERCE_CREDIT_CAPTURE_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $response['STATUS_MSG'];
  // Build a meaningful response message.
  $message = array(
    '<b>' . commerce_agms_reverse_txn_type($txn_type) . '</b>',
    '<b>' . ($response['STATUS_CODE'] != '1' ? t('REJECTED') : t('ACCEPTED')) . ':</b> ' . check_plain($response['STATUS_MSG']),
    t('AVS response: @avs', array('@avs' => check_plain(print_r($response['AVS_CODE'], TRUE)))),
  );

  // Add the CVV response if enabled.
  if (isset($nvp['CVV'])) {
    $message[] = t('CVV match: @cvv', array('@cvv' => check_plain(print_r($response['CVV2_CODE'], TRUE))));
  }

  $transaction->message = implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($response['STATUS_CODE'] != '1') {
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message(check_plain($response['STATUS_MSG']), 'error');
    return FALSE;
  }

  // If Card on File storage is enabled via SAFE and the form says to store data...
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['credit_card']['cardonfile_store']) && $pane_values['credit_card']['cardonfile_store']) {
    // Build a payment details array for the credit card.
    $payment_details = array(
      'CCNumber' => $pane_values['credit_card']['number'],
      'CCExpDate' => $pane_values['credit_card']['exp_year'] . '-' . $pane_values['credit_card']['exp_month'],
    );

    if (isset($pane_values['credit_card']['code'])) {
      $payment_details['CVV'] = $pane_values['credit_card']['code'];
    }

    // First look to see if we already have cards on file for the user.
    $stored_cards = commerce_cardonfile_load_multiple_by_uid($order->uid, $payment_method['instance_id']);
    $add_to_profile = NULL;

    // If we didn't find any, attempt to make a new Card profile now.
    if (empty($stored_cards)) {
      // Submit a SAFE request to create the Card Profile.
      if ($response = commerce_agms_safe_create_card_profile_request($payment_method, $order, $payment_details)) {
        // If the Card Profile creation was a success, store the new card on
        // file data locally.
        // TODO
        if ($response['STATUS_CODE'] == 1) {
          // Build a remote ID that includes the Card Profile ID and the
          // Payment Profile ID.
          $remote_id = $response['SAFE_ID'];

          $card_data = commerce_cardonfile_new();
          $card_data->uid = $order->uid;
          $card_data->payment_method = $payment_method['method_id'];
          $card_data->instance_id = $payment_method['instance_id'];
          $card_data->remote_id = $remote_id;
          $card_data->card_type = !empty($card_type) ? $card_type : 'card';
          $card_data->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
          $card_data->card_number = substr($pane_values['credit_card']['number'], -4);
          $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
          $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
          $card_data->status = 1;

          // Save and log the creation of the new card on file.
          commerce_cardonfile_save($card_data);
          watchdog('commerce_agms', 'SAFE Card Profile @profile_id created and saved to user @uid.', array('@profile_id' => (string) $response->customerProfileId, '@uid' => $order->uid));
        }
        // Agms Gateway do not support check for Customer Id
        // elseif ($response['STATUS_CODE'] != 'E00039') {
        //   // But if a Customer Profile already existed for this user, attempt
        //   // instead to add this card as a new Payment Profile to it.
        //   $result = array_filter(explode(' ', (string) $response->messages->message->text), 'is_numeric');
        //   $add_to_profile = reset($result);
        // }
      }
    }
    else {
      // Extract the user's Card Profile ID from the first card's remote ID.
      $card_data = reset($stored_cards);
      $agms_safe_card_profile_id = $card_data->remote_id;

      // Attempt to add the card as a new payment profile to this Customer Profile.
      $add_to_profile = $agms_safe_card_profile_id;
    }

    // Attempt to add the card to an existing Customer Profile if specified.
    if (!empty($add_to_profile)) {
      $response = commerce_agms_safe_create_card_payment_profile_request($payment_method, $add_to_profile, $order, $payment_details);

      // If the Payment Profile creation was a success, store the new card on
      // file data locally.
      // TODO
      if ((string) $response['STATUS_CODE'] == 1) {
        // Build a remote ID that includes the Customer Profile ID and the new
        // Payment Profile ID.
        $remote_id = $response['SAFE_ID'];

        $card_data = commerce_cardonfile_new();
        $card_data->uid = $order->uid;
        $card_data->payment_method = $payment_method['method_id'];
        $card_data->instance_id = $payment_method['instance_id'];
        $card_data->remote_id = $remote_id;
        $card_data->card_type = !empty($card_type) ? $card_type : 'card';
        $card_data->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
        $card_data->card_number = substr($pane_values['credit_card']['number'], -4);
        $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
        $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
        $card_data->status = 1;

        // Save and log the creation of the new card on file.
        commerce_cardonfile_save($card_data);
        watchdog('commerce_agms', 'SAFE Card Profile added to Customer Profile @profile_id for user @uid.', array('@profile_id' => $add_to_profile, '@uid' => $order->uid));
      }
      elseif (!empty($card_data) && (string) $response['STATUS_CODE'] == 'E00040') {
        // But if we could not find a customer profile, assume the existing
        // customer profile ID we had is no longer valid and deactivate the card
        // data that resulted in the error.
        $card_data->status = 0;
        commerce_cardonfile_save($card_data);

        // Submit a SAFE request to create the Customer Profile.
        if ($response = commerce_agms_safe_create_card_profile_request($payment_method, $order, $payment_details)) {
          // If the Card Profile creation was a success, store the new card on
          // file data locally.
          if ((string) $response['STATUS_CODE'] == 1) {
            // Build a remote ID that includes the Customer Profile ID and the
            // Payment Profile ID.
            $remote_id = $response['SAFE_ID'];

            $card_data = commerce_cardonfile_new();
            $card_data->uid = $order->uid;
            $card_data->payment_method = $payment_method['method_id'];
            $card_data->instance_id = $payment_method['instance_id'];
            $card_data->remote_id = $remote_id;
            $card_data->card_type = !empty($card_type) ? $card_type : 'card';
            $card_data->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
            $card_data->card_number = substr($pane_values['credit_card']['number'], -4);
            $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
            $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
            $card_data->status = 1;

            // Save and log the creation of the new card on file.
            commerce_cardonfile_save($card_data);
            watchdog('commerce_agms', 'SAFE Card Profile @profile_id created and saved to user @uid.', array('@profile_id' => (string) $response->customerProfileId, '@uid' => $order->uid));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_agms_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state) {
  // If the payment terminal is displayed for an agms transaction...
  if (!empty($form['payment_terminal']) && $form_state['payment_method']['method_id'] == 'agms') {
    // Add a select list to let the administrator choose a different transaction
    // type than the payment method's default.
    $form['payment_terminal']['payment_details']['txn_type'] = array(
      '#type' => 'select',
      '#title' => t('Transaction type'),
      '#options' => array(
        COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only'),
        COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      ),
      '#default_value' => $form_state['payment_method']['settings']['txn_type'],
    );
  }
}

/**
 * Imitates the checkout form submission callback for the AIM payment method.
 */
function commerce_agms_safe_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // First attempt to load the card on file.
  $card_data = commerce_cardonfile_load($pane_values['cardonfile']);

  // Fail now if it is no longer available or the card is inactive.
  if (empty($card_data) || $card_data->status == 0) {
    drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
    return FALSE;
  }

  return commerce_agms_safe_cardonfile_charge($payment_method, $card_data, $order, $charge);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_agms_form_commerce_cardonfile_update_form_alter(&$form, &$form_state) {
  // Extract the card data from the form and load the payment method instance.
  $card_data = $form['card_data']['#value'];
  $payment_method = commerce_payment_method_instance_load($card_data->instance_id);

  // If this is not an Agms Payment Gateway card then bail.
  // TODO
  if ($payment_method['method_id'] != 'agms') {
    return;
  }


  // Extract the Card Profile and Payment Profile IDs from the remote_id.
  $agms_safe_card_profile_id = $card_data->remote_id;

  // Load the full payment profile from Agms Payment Safe Gateway.
  $payment_profile_xml = commerce_agms_safe_get_customer_payment_profile_request($payment_method, $agms_safe_card_profile_id, $agms_safe_payment_profile_id);

  // TODO Extract Data and assign
  if ($payment_profile_xml->messages->message->code == 'I00001') {
    $billto = $payment_profile_xml->paymentProfile->billTo;

    $address = array(
      '<strong>' . t('Billing address:') . '</strong>',
      (string) $billto->firstName . ' ' . (string) $billto->lastName,
      (string) $billto->company,
      (string) $billto->address,
      (string) $billto->city . ', ' . (string) $billto->state . ' ' . (string) $billto->zip,
      (string) $billto->country,
    );

    // Add the address info to the form.
    $form['billto'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="commerce-agms-safe-billto">' . implode('<br />', array_diff($address, array(''))) . '</div>',
      '#weight' => -50,
    );

    $form_state['billto_xml'] = $billto;
  }
}

/**
 * Card on file callback: background charge payment
 *
 * @param object $payment_method
 *  The payment method instance definition array.
 * @param object $card_data
 *   The stored credit card data array to be processed
 * @param object $order
 *   The order object that is being processed
 * @param array $charge
 *   The price array for the charge amount with keys of 'amount' and 'currency'
 *   If null the total value of the order is used.
 *
 * @return
 *   TRUE if the transaction was successful
 */
function commerce_agms_safe_cardonfile_charge($payment_method, $card_data, $order, $charge = NULL) {
  // Format order total for transaction.
  if (!isset($charge)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $charge = commerce_line_items_total($wrapper->commerce_line_items);
  }

  // Extract the Customer Profile and Payment Profile IDs from the remote_id.
  list($agms_safe_card_profile_id, $agms_safe_payment_profile_id) = explode('|', $card_data->remote_id);

  // Determine the proper transaction element to use inside the XML.
  $element_name = commerce_agms_safe_transaction_element_name($payment_method['settings']['txn_type']);

  // Build a data array for the transaction API request.
  // TODO
  $api_request_data = array(
    'transaction' => array(
      $element_name => array(
        'amount' => number_format(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']), 2, '.', ''),
        'customerProfileId' => $cim_customer_profile_id,
        'customerPaymentProfileId' => $cim_payment_profile_id,
        'order' => array(
          'invoiceNumber' => $order->order_number,
        ),
      ),
    ),
    'extraOptions' => '<![CDATA[x_delim_data=TRUE&amp;x_delim_char=|&amp;x_encap_char="&amp;x_solution_id=A1000009&amp;x_currency_code=' . $charge['currency_code'] . '&amp;x_customer_ip=' . substr(ip_address(), 0, 15) . ']]>',
  );

  // If we get a response from the API server...
  $xml_response = commerce_agms_safe_request($payment_method, 'createCustomerProfileTransactionRequest', $api_request_data);

  if (!empty($xml_response->directResponse)) {
    // Extract the response data from the XML.
    $response = explode('|', (string) $xml_response->directResponse);

    for ($i = 0; $i < count($response); $i++) {
      $response[$i] = substr($response[$i], 1, strlen($response[$i]) - 2);
    }

    // Prepare a transaction object to represent the transaction attempt.
    $transaction = commerce_payment_transaction_new('agms', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $response[6];
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];
    $transaction->payload[REQUEST_TIME] = $response;

    // If we didn't get an approval response code...
    if ($response[0] != '1') {
      // Create a failed transaction with the error message.
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }
    else {
      // Set the transaction status based on the type of transaction this was.
      switch ($payment_method['settings']['txn_type']) {
        case COMMERCE_CREDIT_AUTH_ONLY:
          $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
          break;

        case COMMERCE_CREDIT_AUTH_CAPTURE:
          $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          break;
      }
    }

    // Store the type of transaction in the remote status.
    $transaction->remote_status = $response[11];

    // Build a meaningful response message.
    $message = array(
      '<b>' . commerce_agms_reverse_txn_type(commerce_agms_txn_type($payment_method['settings']['txn_type'])) . '</b>',
      '<b>' . ($response[0] != '1' ? t('REJECTED') : t('ACCEPTED')) . ':</b> ' . check_plain($response[3]),
      t('AVS response: @avs', array('@avs' => commerce_agms_avs_response($response[5]))),
    );

    $transaction->message = implode('<br />', $message);

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);

    // If the payment failed, display an error and rebuild the form.
    if ($response[0] != '1') {
      drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
      drupal_set_message(check_plain($response[3]), 'error');
      return FALSE;
    }

    return;
  }
  elseif ((string) $xml_response->messages->message->code == 'E00040') {
    // If the response indicated a non-existent profile, deactive it now.
    $card_data->status = 0;
    commerce_cardonfile_save($card_data);

    drupal_set_message(t('The card you selected is no longer valid. Please use a different card to complete payment.'), 'error');
    return FALSE;
  }

  drupal_set_message(t('We could not process your card on file at this time. Please try again or use a different card.'), 'error');
  return FALSE;

}

/**
 * Card on file callback: updates the associated customer payment profile.
 */
function commerce_agms_safe_cardonfile_update($form, &$form_state, $payment_method, $card_data) {
  // Extract the Card Profile and Payment Profile IDs from the remote_id.
  list($agms_safe_card_profile_id, $agms_safe_payment_profile_id) = explode('|', $card_data->remote_id);

  if ($form_state['values']['credit_card']['number'] != $form['credit_card']['number']['#default_value']) {
    $number = $form_state['values']['credit_card']['number'];
  }
  else {
    $number = 'XXXX' . $card_data->card_number;
  }

  // Load the payment profile so that billTo can be updated.
  $payment_profile_xml = commerce_agms_safe_get_card_payment_profile_request($payment_method, $agms_safe_card_profile_id, $agms_safe_payment_profile_id);
  $billto = $payment_profile_xml->paymentProfile->billTo;
  $first_name = (string) $billto->firstName;
  $last_name = (string) $billto->lastName;
  // Extract the first and last name from form values.
  if (!empty($form_state['values']['credit_card']['owner'])) {
    $name_parts = explode(' ', $form_state['values']['credit_card']['owner']);
    $first_name = array_shift($name_parts);
    $last_name = implode(' ', $name_parts);
  }

  // Build the base profile update data.
  $api_request_data = array(
    'customerProfileId' => $cim_customer_profile_id,
    'paymentProfile' => array(
      'billTo' => array(
        'firstName' =>  substr($first_name, 0, 50),
        'lastName' => substr($last_name, 0, 50),
        'company' => (string) $billto->company,
        'address' => (string) $billto->address,
        'city' => (string) $billto->city,
        'state' => (string) $billto->state,
        'zip' => (string) $billto->zip,
        'country' => (string) $billto->country,
      ),
      'payment' => array(
        'creditCard' => array(
          'cardNumber' => $number,
          'expirationDate' => $card_data->card_exp_year . '-' . $card_data->card_exp_month,
        ),
      ),
      'customerPaymentProfileId' => $cim_payment_profile_id,
    ),
  );

  // Fetch the response from the API server and let Card on File know if the
  // update was successful.
  $xml_response = commerce_agms_safe_request($payment_method, 'updateCustomerPaymentProfileRequest', $api_request_data);

  return (string) $xml_response->messages->message->code == 'I00001';
}

/**
 * Card on file callback: deletes the associated customer payment profile.
 */
function commerce_agms_safe_cardonfile_delete($form, &$form_state, $payment_method, $card_data) {
  // Extract the Customer Profile and Payment Profile IDs from the remote_id.
  list($agms_safe_card_profile_id, $agms_safe_payment_profile_id) = explode('|', $card_data->remote_id);

  // Fetch the response from the API server and let Card on File know that the
  // delete was either successful or not necessary.
  $xml_response = commerce_agms_safe_delete_card_payment_profile_request($payment_method, $agms_safe_card_profile_id, $agms_safe_payment_profile_id);
  $code = (string) $xml_response->messages->message->code;

  return in_array($code, array('I00001', 'E00040'));
}

/**
 * Generates a billTo array for SAFE API requests.
 *
 * @param $order
 *   The order object containing the billing information used for the billTo.
 *
 * @return
 *   An array used to generate the billTo XML in CIM API requests.
 */
function commerce_agms_safe_billto_array($order) {
  // Prepare the billing address for use in the request.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  // Ensure we have a first and last name in the address.
  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  // Ensure we have a state the address.
  if (empty($billing_address['administrative_area'])) {
    $billing_address['administrative_area'] = $billing_address['locality'];
  }

  // Return the billTo array.
  return array(
    'firstName' => substr($billing_address['first_name'], 0, 50),
    'lastName' => substr($billing_address['last_name'], 0, 50),
    'company' => substr($billing_address['organisation_name'], 0, 50),
    'address' => substr($billing_address['thoroughfare'], 0, 60),
    'city' => substr($billing_address['locality'], 0, 40),
    'state' => substr($billing_address['administrative_area'], 0, 40),
    'zip' => substr($billing_address['postal_code'], 0, 20),
    'country' => $billing_address['country'],
  );
}

/**
 * Generates a creditCard array for SAFE API requests.
 *
 * @param $payment_details
 *   An array of payment details used in a SAFE API request that doesn't have to
 *   include credit card data. If it does, the following keys are expected:
 *   - cardNumber: the full credit card number
 *   - expirationDate: the expiration date in YYYY-MM format
 *   - cardCode: the three or four digit card security code
 */
function commerce_agms_safe_credit_card_array($payment_details) {
  $credit_card = array();

  foreach (array('cardNumber', 'expirationDate', 'cardCode') as $key) {
    if (!empty($payment_details[$key])) {
      $credit_card[$key] = $payment_details[$key];
    }
  }

  return $credit_card;
}

/**
 * Submits a createCardProfileRequest XML SAFE API request to Agms Payment Gateway.
 *
 * This function will attempt to create a SAFE Card Profile and a default
 * Payment Profile for it using the given payment details.
 *
 * @param $payment_method
 *   The payment method instance array containing the API credentials for a SAFE
 *   enabled Agms Payment Gateway account.
 * @param $order
 *   The order object containing the billing address and e-mail to use for the
 *   customer profile.
 * @param $payment_details
 *   An array of payment details to use in the default payment profile. See the
 *   respective helper array functions for possible keys.
 *
 * @return
 *   A SimpleXMLElement containing the API response.
 *
 * @see commerce_agms_safe_credit_card_array()
 */
function commerce_agms_safe_create_card_profile_request($payment_method, $order, $payment_details) {
  $billto = commerce_agms_safe_billto_array($order);

  // Build the base profile request data.
  $api_request_data = array(
    'profile' => array(
      'merchantCustomerId' => $order->uid,
      'description' => $billto['firstName'] . ' ' . $billto['lastName'],
      'email' => $order->mail,
      'paymentProfiles' => array(
        'billTo' => $billto,
        'payment' => array(),
      ),
    ),
  );

  // If the order is anonymous, unset the merchantCustomerId from the request.
  if (empty($api_request_data['profile']['merchantCustomerId'])) {
    unset($api_request_data['profile']['merchantCustomerId']);
  }

  // Add credit card payment details to the default payment profile if given.
  $credit_card = commerce_agms_safe_credit_card_array($payment_details);

  if (!empty($credit_card)) {
    $api_request_data['profile']['paymentProfiles']['payment']['creditCard'] = $credit_card;
  }

  return commerce_agms_safe_request($payment_method, 'createCustomerProfileRequest', $api_request_data);
}

/**
 * Submits a createCardPaymentProfileRequest XML SAFE API request to Agms Payment Gateway.
 *
 * @param $payment_method
 *   The payment method instance array containing the API credentials for a SAFE
 *   enabled Agms Payment account.
 * @param $agms_safe_card_profile_id
 *   A numerical SAFE Card Profile ID.
 * @param $order
 *   The order object containing the billing address and e-mail to use for the
 *   payment profile.
 * @param $payment_details
 *   An array of payment details to use in the default payment profile. See the
 *   respective helper array functions for possible keys.
 *
 * @return
 *   A SimpleXMLElement containing the API response.
 *
 * @see commerce_agms_safe_credit_card_array()
 */
function commerce_agms_safe_create_card_payment_profile_request($payment_method, $agms_safe_card_profile_id, $order, $payment_details) {
  $billto = commerce_agms_safe_billto_array($order);

  // Build the base profile request data.
  $api_request_data = array(
    'customerProfileId' => $agms_safe_customer_profile_id,
    'paymentProfile' => array(
      'billTo' => $billto,
      'payment' => array(),
    ),
  );

  // Add credit card payment details to the default payment profile if given.
  $credit_card = commerce_agms_safe_credit_card_array($payment_details);

  if (!empty($credit_card)) {
    $api_request_data['paymentProfile']['payment']['creditCard'] = $credit_card;
  }

  return commerce_agms_safe_request($payment_method, 'createCustomerPaymentProfileRequest', $api_request_data);
}

/**
 * Submits a getCardPaymentProfileRequest XML SAFE API request to Agms Payment Gateway.
 *
 * @param $payment_method
 *   The payment method instance array containing the API credentials for a SAFE
 *   enabled Agms Payment Gateway account.
 * @param $agms_safe_card_profile_id
 *   A numerical SAFE Card Profile ID.
 * @param $agms_safe_payment_profile_id
 *   A numerical SAFE Card Payment Profile ID.
 *
 * @return
 *   A SimpleXMLElement containing the API response.
 */
function commerce_agms_safe_get_card_payment_profile_request($payment_method, $agms_safe_customer_profile_id, $agms_safe_payment_profile_id) {
  // Build the get payment profile request data.
  $api_request_data = array(
    'customerProfileId' => $cim_customer_profile_id,
    'customerPaymentProfileId' => $cim_payment_profile_id,
  );

  return commerce_agms_safe_request($payment_method, 'getCustomerPaymentProfileRequest', $api_request_data);
}

/**
 * Submits a deleteCardPaymentProfileRequest XML SAFE API request to Agms Payment Gateway.
 *
 * @param $payment_method
 *   The payment method instance array containing the API credentials for a SAFE
 *   enabled Agms Payment Gateway account.
 * @param $agms_safe_customer_profile_id
 *   A numerical SAFE Card Profile ID.
 * @param $agms_safe_payment_profile_id
 *   A numerical SAFE Card Payment Profile ID.
 *
 * @return
 *   A SimpleXMLElement containing the API response.
 */
function commerce_agms_safe_delete_card_payment_profile_request($payment_method, $agms_safe_card_profile_id, $agms_safe_payment_profile_id) {
  // Build the payment profile delete request data.
  $api_request_data = array(
    'customerProfileId' => $agms_safe_card_profile_id,
    'customerPaymentProfileId' => $agms_safe_payment_profile_id,
  );

  return commerce_agms_safe_request($payment_method, 'deleteCustomerPaymentProfileRequest', $api_request_data);
}

/**
 * Submits an AIM API request to Agms Payment Gateway.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_agms_request($payment_method, $nvp = array()) {
  
  $url = commerce_agms_server_url($payment_method['settings']['txn_mode']);
  // Add the default name-value pairs to the array.
  $nvp += array(
    // API credentials
    'GatewayUserName' => $payment_method['settings']['commerce_agms_username'],
    'GatewayPassword' => $payment_method['settings']['commerce_agms_password']    
  );

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_agms_request', $nvp);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    // Mask the credit card number and CVV.
    $log_nvp = $nvp;
    $log_nvp['GatewayUserName'] = str_repeat('X', strlen($log_nvp['GatewayUserName']));
    $log_nvp['GatewayPassword'] = str_repeat('X', strlen($log_nvp['GatewayPassword']));

    if (!empty($log_nvp['CCNumber'])) {
      $log_nvp['CCNumber'] = str_repeat('X', strlen($log_nvp['CCNumber']) - 4) . substr($log_nvp['CCNumber'], -4);
    }

    if (!empty($log_nvp['CVV'])) {
      $log_nvp['CVV'] = str_repeat('X', strlen($log_nvp['CVV']));
    }

    watchdog('commerce_agms', 'Agms Payment Gateway request to @url: !param', array('@url' => $url, '!param' => '<pre>' . check_plain(print_r($log_nvp, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Build  request header and body
  $headers = Agms::buildRequestHeader($op='ProcessTransaction');
  $body = Agms::buildRequestBody($nvp, $op='ProcessTransaction');
  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);
  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_agms', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // Make the response an array.
  $response = Agms::parseResponse($result, $op='ProcessTransaction');

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_agms', 'Agms Payment Gateway response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  return $response;
}

/**
 * Returns the URL to the Agms Payment Gateway server determined by transaction mode.
 *
 * @param $txn_mode
 *   The transaction mode that relates to the live or test server.
 *
 * @return
 *   The URL to use to submit requests to the Agms Payment Gateway server.
 */
function commerce_agms_server_url($txn_mode) {
  switch ($txn_mode) {
    case AGMS_TXN_MODE_LIVE:
    case AGMS_TXN_MODE_LIVE_TEST:
      return 'https://gateway.agms.com/roxapi/agms.asmx';
  }
}

/**
 * Submits a SAFE API request to Agms Payment Gateway.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 * @param $request_type
 *   The name of the request type to submit.
 * @param $api_request_data
 *   An associative array of data to be turned into a CIM XML API request.
 */
function commerce_agms_safe_request($payment_method, $request_type, $api_request_data) {
  // Get the API endpoint URL for the method's transaction mode.
  $url = commerce_agms_safe_server_url($payment_method['settings']['txn_mode']);
  // Add default data to the API request data array.
  if (!isset($api_request_data['merchantAuthentication'])) {
    $api_request_data = array(
      'merchantAuthentication' => array(
        'name' => $payment_method['settings']['login'],
        'transactionKey' => $payment_method['settings']['tran_key'],
      ),
    ) + $api_request_data;
  }

  // Determine if it is necessary to add a validation mode to the API request.
  $validation_mode = '';

  switch ($request_type) {
    case 'createCustomerProfileRequest':
      if (empty($api_request_data['profile']['paymentProfiles'])) {
        $validation_mode = 'none';
      }
      else {
        $validation_mode = $payment_method['settings']['txn_mode'] == AUTHNET_TXN_MODE_LIVE ? 'liveMode' : 'testMode';
      }
      break;

    case 'createCustomerPaymentProfileRequest':
    case 'updateCustomerPaymentProfileRequest':
    case 'validateCustomerPaymentProfileRequest':
      $validation_mode = $payment_method['settings']['txn_mode'] == AUTHNET_TXN_MODE_LIVE ? 'liveMode' : 'testMode';
      break;

    default:
      break;
  }

  // Add the validation mode now if one was found.
  if (!empty($validation_mode)) {
    $api_request_data['validationMode'] = $validation_mode;
  }

  // Build and populate the API request SimpleXML element.
  $api_request_element = new SimpleXMLElement('<' . $request_type . '/>');
  $api_request_element->addAttribute('xmlns', 'AnetApi/xml/v1/schema/AnetApiSchema.xsd');
  commerce_simplexml_add_children($api_request_element, $api_request_data);

  // Allow modules an opportunity to alter the request before it is sent.
  drupal_alter('commerce_agms_safe_request', $api_request_element);

  // Generate an XML string.
  $xml = $api_request_element->asXML();

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    // Mask the credit card number and CVV.
    $log_element = clone($api_request_element);
    $log_element->merchantAuthentication->name = str_repeat('X', strlen((string) $log_element->merchantAuthentication->name));
    $log_element->merchantAuthentication->transactionKey = str_repeat('X', strlen((string) $log_element->merchantAuthentication->transactionKey));

    if (!empty($log_element->profile->paymentProfiles->payment->creditCard->cardNumber)) {
      $card_number = (string) $log_element->profile->paymentProfiles->payment->creditCard->cardNumber;
      $log_element->profile->paymentProfiles->payment->creditCard->cardNumber = str_repeat('X', strlen($card_number) - 4) . substr($card_number, -4);
    }

    if (!empty($log_element->paymentProfile->payment->creditCard->cardNumber)) {
      $card_number = (string) $log_element->paymentProfile->payment->creditCard->cardNumber;
      $log_element->paymentProfile->payment->creditCard->cardNumber = str_repeat('X', strlen($card_number) - 4) . substr($card_number, -4);
    }

    if (!empty($log_element->profile->paymentProfiles->payment->creditCard->cardCode)) {
      $log_element->profile->paymentProfiles->payment->creditCard->cardCode = str_repeat('X', strlen((string) $log_element->profile->paymentProfiles->payment->creditCard->cardCode));
    }

    if (!empty($log_element->paymentProfile->payment->creditCard->cardCode)) {
      $log_element->paymentProfile->payment->creditCard->cardCode = str_repeat('X', strlen((string) $log_element->paymentProfile->payment->creditCard->cardCode));
    }

    watchdog('commerce_agms', 'Agms Payment Gateway SAFE @type to @url: @xml', array('@type' => $request_type, '@url' => $url, '@xml' => $log_element->asXML()), WATCHDOG_DEBUG);
  }

  // Build the array of header information for the request.
  $header = array();
  $header[] = 'Content-type: text/xml; charset=utf-8';
  $header[] = 'Content-length: ' . strlen($api_request_element->asXML());

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_agms', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // If we received data back from the server...
  if (!empty($result)) {
    // Remove non-absolute XML namespaces to prevent SimpleXML warnings.
    $result = str_replace(' xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd"', '', $result);

    // Extract the result into an XML response object.
    $response = new SimpleXMLElement($result);

    // Log the API response if specified.
    if ($payment_method['settings']['log']['response'] == 'response') {
      watchdog('commerce_agms', 'API response received:<pre>@xml</pre>', array('@xml' => $response->asXML()));
    }

    return $response;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns the URL to the Agms Payment Gateway SAFE server determined by transaction mode.
 *
 * @param $txn_mode
 *   The transaction mode that relates to the live or test server.
 *
 * @return
 *   The URL to use to submit requests to the SAFE SAFE server.
 */
function commerce_agms_safe_server_url($txn_mode) {
  switch ($txn_mode) {
    case AUTHNET_TXN_MODE_LIVE:
    case AUTHNET_TXN_MODE_LIVE_TEST:
      return 'https://gateway.agms.com/roxapi/AGMS_SAFE_API.asmx';
  }
}

/**
 * Returns the transaction type string for Agms Payment Gateway that corresponds to the
 *   Drupal Commerce constant.
 *
 * @param $txn_type
 *   A Drupal Commerce transaction type constant.
 */
function commerce_agms_txn_type($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return 'auth';
    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'capture';
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'sale';
    case COMMERCE_CREDIT_CAPTURE_ONLY:
      return 'capture';
    case COMMERCE_CREDIT_REFERENCE_SET:
    case COMMERCE_CREDIT_REFERENCE_TXN:
    case COMMERCE_CREDIT_REFERENCE_REMOVE:
    case COMMERCE_CREDIT_REFERENCE_CREDIT:
      return NULL;
    case COMMERCE_CREDIT_CREDIT:
      return 'refund';
    case COMMERCE_CREDIT_VOID:
      return 'void';
  }
}

/**
 * Returns the CIM transaction request type that correponds to a the Drupal
 * Commerce constant.
 *
 * @param $txn_type
 *   A Drupal Commerce transaction type constant.
 */
function commerce_agms_safe_transaction_element_name($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return 'profileTransAuthOnly';
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'profileTransAuthCapture';
    case COMMERCE_CREDIT_CAPTURE_ONLY:
      return 'profileTransCaptureOnly';
    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'profileTransPriorAuthCapture';
    case COMMERCE_CREDIT_CREDT:
      return 'profileTransRefund';
    case COMMERCE_CREDIT_VOID:
      return 'profileTransVoid';
    default:
      return '';
  }
}

/**
 * Returns the description of an Agms Payment Gateway transaction type.
 *
 * @param $txn_type
 *   An Agms Payment Gateway transaction type string.
 */
function commerce_agms_reverse_txn_type($txn_type) {
  switch (strtoupper($txn_type)) {
    case 'AUTH_ONLY':
      return t('Authorization only');
    case 'PRIOR_AUTH_CAPTURE':
      return t('Prior authorization capture');
    case 'AUTH_CAPTURE':
      return t('Authorization and capture');
    case 'CAPTURE_ONLY':
      return t('Capture only');
    case 'CREDIT':
      return t('Credit');
    case 'VOID':
      return t('Void');
  }
}

/**
 * Returns the message text for an AVS response code.
 */
function commerce_agms_avs_response($code) {
  switch ($code) {
    case 'A':
      return t('Address (Street) matches, ZIP does not');
    case 'B':
      return t('Address information not provided for AVS check');
    case 'E':
      return t('AVS error');
    case 'G':
      return t('Non-U.S. Card Issuing Bank');
    case 'N':
      return t('No Match on Address (Street) or ZIP');
    case 'P':
      return t('AVS not applicable for this transaction');
    case 'R':
      return t('Retry – System unavailable or timed out');
    case 'S':
      return t('Service not supported by issuer');
    case 'U':
      return t('Address information is unavailable');
    case 'W':
      return t('Nine digit ZIP matches, Address (Street) does not');
    case 'X':
      return t('Address (Street) and nine digit ZIP match');
    case 'Y':
      return t('Address (Street) and five digit ZIP match');
    case 'Z':
      return t('Five digit ZIP matches, Address (Street) does not');
  }

  return '-';
}

/**
 * Returns the message text for a CVV match.
 */
function commerce_agms_cvv_response($code) {
  switch ($code) {
    case 'M':
      return t('Match');
    case 'N':
      return t('No Match');
    case 'P':
      return t('Not Processed');
    case 'S':
      return t('Should have been present');
    case 'U':
      return t('Issuer unable to process request');
  }

  return '-';
}
